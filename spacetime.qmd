---
title: "About"
editor_options: 
  chunk_output_type: console
execute: 
  eval: false
engine: knitr
shift-heading-level-by: 1
---

# Working with `.janno` context information in R

For data analysis and visualization an R-based workflow may be helpful. This is especially relevant if we want to incorporate spatial and temporal information.

## Loading a `.janno` file into R

We previously prepared the PCA dataset and we can load it again into an R environment.

```{r}
pca_out <- readRDS("scratch/pca_out.rds")
```

This result dataset lacks all context information for the individual samples, which renders it really difficult to make sense of the PCA plot without prior knowledge. We do have plenty of context information, though, in the `.janno` file of the `iceWithRefSmall` package we prepared for the PCA in the first place. How do we access this?

As the `.janno` file is a simple `.tsv` file, we can easily read it into R, for example with `readr::read_tsv()` into a generic `tibble`. Beyond that the Poseidon ecosystem includes an R package [`janno`](https://www.poseidon-adna.org/#/janno_r_package) to read `.janno` files into a more specific `janno` data structure with some additional features.

```{r}
ref_janno <- janno::read_janno("scratch/iceWithRefSmall")
```

::: {.callout-note}
`janno::read_janno()` applies a structural validity check to the input, transforms the columns to the correct data type for specified `.janno` columns and correctly detects list columns. At the same time the `janno` S3 class is derived from tibble and thus fully interoperable with the tidyverse.
:::

With this information ready we can easily enrich our PCA plot to make it more readable.

```{r}
pca_with_context <- dplyr::bind_cols(
  pca_out$pca.sample_coordinates,
  group = unlist(ref_janno$Group_Name)
)
```

```{r}
library(magrittr)
library(ggplot2)

p <- pca_with_context %>%
  dplyr::mutate(group = dplyr::case_match(
    group,
    c("iceG", "English", "Syrian", "Sardinian") ~ group,
    .default = NA
  )) %>%
  dplyr::arrange(!is.na(group), group) %>%
  ggplot() +
  geom_point(
    aes(x = PC1, y = PC2, colour = group)
  ) +
  scale_y_reverse() +
  coord_fixed()
```

```{r, echo=FALSE}
ggsave(
  "img/pca2.png",
  plot = p,
  width = 600, height = 400,
  dpi = 150,
  units = "px",
  scale = 1.2
)
```

![](img/pca2.png)

## Adding new information to a `.janno` file

Now what about our own sample? As a first step we add the new information we received from Prof. P. to our Poseidon package `ice`. We do so by editing the `.janno` file at `ice/ice.janno`.

Starting from

::: {.table-responsive}

|Poseidon_ID|Genetic_Sex|Group_Name|Latitude|Longitude|
|-----------|-----------|----------|--------|---------|
|ice        |M          |iceG      |46.77   |10.83    |

:::

we add some additional columns for the age information.

::: {.table-responsive}

|Date_Type  |Date_C14_Uncal_BP|Date_C14_Uncal_BP_Err|Date_BC_AD_Start|Date_BC_AD_Stop|
|-----------|-----------------|---------------------|----------------|---------------|
|C14        |4555             |34                   |n/a             |n/a            |

:::

::: {.callout-note}
All "official", pre-defined `.janno` file columns are specified as part of the package schema [here](https://github.com/poseidon-framework/poseidon-schema/blob/master/janno_columns.tsv). Beyond that the Poseidon websites features more detailed and concrete explanations of the columns [here](https://www.poseidon-adna.org/#/janno_details), for example for all columns related to sample age and dating: [Temporal position](https://www.poseidon-adna.org/#/janno_details?id=temporal-position).
:::

Optionally we can document this change to the package in a changelog, which we add to the package in the form of a `CHANGELOG.md` file.

```{filename="CHANGELOG.md"}
- V 0.2.0: Added a radiocarbon date for the ice sample.
```

We should then also update the package version number in our `POSEIDON.yml` file and link the changelog there:

```{filename="POSEIDON.yml"}
poseidonVersion: 2.7.1
title: ice
packageVersion: 0.2.0
lastModified: 2024-01-24
...
changelogFile: CHANGELOG.md
```

After implementing the change we should again check the structural validity of the package with `trident validate`.

```{bash}
trident validate -d ice
```

## Spatial and temporal data in `.janno` files

With the data added, we can load the `.janno` file for our sample into R.

```{r}
ice_janno <- janno::read_janno("scratch/ice")
```

As the `janno` class is derived from `tibble` we can easily transform it to a spatial object as e.g. specified by the `sf` library. And we can then plot it together with arbitrary spatial reference data to create map.

```{r}
ice_sf <- ice_janno %>%
  sf::st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)

worldwide_coastline <- rnaturalearth::ne_coastline()

p <- ggplot() +
  geom_sf(data = worldwide_coastline) +
  geom_sf(data = ice_sf, color = "red") +
  coord_sf(xlim = c(-15,40), ylim = c(35, 60))
```

```{r, echo=FALSE}
ggsave(
  "img/map.png",
  plot = p,
  width = 600, height = 400,
  dpi = 150,
  units = "px",
  scale = 1.2
)
```

![](img/map.png)

For temporal information, the `janno` package includes a special convenience function: `janno::process_age()`. It can handle all kind of age data that can be specified for an individual sample in a Poseidon package.

For C14 date calibration it runs (sum)calibration through the [`Bchron`](https://github.com/andrewcparnell/Bchron/) R package^[@Bchron2008] to generate a post-calibration probability distribution, which in turn can be used for derived measures.

`process_age()` thus appends up to five additional (list) columns to the `janno` file:

```{r}
ice_age <- ice_janno %>% janno::process_age()
```

The `Date_BC_AD_*_Derived` columns simply include probable start, end and median ages:

```{r}
ice_age$Date_BC_AD_Start_Derived
ice_age$Date_BC_AD_Median_Derived
ice_age$Date_BC_AD_Stop_Derived
```

`ice_age$Date_BC_AD_Prob` includes the full (post-calibration) year-wise probability distribution for a given sample. We can plot the distribution just as for example [OxCal](https://c14.arch.ox.ac.uk/oxcal.html) would do it for us.

```{r}
prob <- ice_age$Date_BC_AD_Prob[[1]]

p <- ggplot() +
  ggridges::geom_ridgeline(
    data = prob,
    mapping = aes(x = age, height = sum_dens, y = "sample 1"), scale = 30
  ) +
  geom_line(
    data = prob %>%
      dplyr::mutate(ts = cumsum(two_sigma != dplyr::lag(two_sigma, default = FALSE))) %>%
      dplyr::filter(two_sigma),
    mapping = aes(x = age, y = "sample 1", group = ts),
    position = position_nudge(y = -0.1)
  ) +
  theme(axis.title.y = element_blank())
```

```{r, echo=FALSE}
ggsave(
  "img/c14ridge.png",
  plot = p,
  width = 600, height = 400,
  dpi = 150,
  units = "px",
  scale = 1.2
)
```

![](img/c14ridge.png)

Though the ages sampled from the distribution in `ice_age$Date_BC_AD_Sample` may be even more important for derived applications.

***

::: {.callout-tip}
## Learn more about...
- The janno R package: [janno R package](https://www.poseidon-adna.org/#/janno_r_package)
- The Natural Earth Data project: [Geodata download](https://www.naturalearthdata.com/downloads/)
- The Bchron R package: [Vignette: Calibrating radiocarbon dates](https://andrewcparnell.github.io/Bchron/articles/Bchron.html#calibrating-radiocarbon-dates)
:::
